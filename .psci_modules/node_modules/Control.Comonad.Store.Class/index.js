
// | This module defines the `ComonadStore` type class and its instances.
"use strict";
var Control_Comonad = require("../Control.Comonad");
var Control_Comonad_Store_Trans = require("../Control.Comonad.Store.Trans");
var Control_Extend = require("../Control.Extend");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Tuple = require("../Data.Tuple");
var Prelude = require("../Prelude");

// | The `ComonadStore` type class represents those monads which support local position information via

// | `pos` and `peek`.

// |

// | - `pos` reads the current position.

// | - `peek` reads the value at the specified position in the specified context.

// |

// | An implementation is provided for `StoreT`.

// |

// | Laws:

// |

// | - `pos (extend _ x) = pos x`

// | - `peek (pos x) x = extract x`

// |

// | For example:

// |

// | ```purescript

// | blur :: forall w. (ComonadStore Number w) -> w Number -> w Number

// | blur = extend \r -> (peeks (\n -> n - 1) r + peeks (\n -> n + 1) r) / 2)

// | ```
var ComonadStore = function (Comonad0, peek, pos) {
    this.Comonad0 = Comonad0;
    this.peek = peek;
    this.pos = pos;
};
var pos = function (dict) {
    return dict.pos;
};
var peek = function (dict) {
    return dict.peek;
};

// | Extract a value from a position which depends on the current position.
var peeks = function (dictComonadStore) {
    return function (f) {
        return function (x) {
            return peek(dictComonadStore)(f(pos(dictComonadStore)(x)))(x);
        };
    };
};

// | Reposition the focus at the specified position, which depends on the current position.
var seeks = function (dictComonadStore) {
    return function (f) {
        return function ($15) {
            return peeks(dictComonadStore)(f)(Control_Extend.duplicate((dictComonadStore.Comonad0()).Extend0())($15));
        };
    };
};

// | Reposition the focus at the specified position.
var seek = function (dictComonadStore) {
    return function (s) {
        return function ($16) {
            return peek(dictComonadStore)(s)(Control_Extend.duplicate((dictComonadStore.Comonad0()).Extend0())($16));
        };
    };
};

// | Extract a collection of values from positions which depend on the current position.
var experiment = function (dictComonadStore) {
    return function (dictFunctor) {
        return function (f) {
            return function (x) {
                return Data_Functor.map(dictFunctor)(Data_Function.flip(peek(dictComonadStore))(x))(f(pos(dictComonadStore)(x)));
            };
        };
    };
};
var comonadStoreStoreT = function (dictComonad) {
    return new ComonadStore(function () {
        return Control_Comonad_Store_Trans.comonadStoreT(dictComonad);
    }, function (s) {
        return function (v) {
            return Control_Comonad.extract(dictComonad)(v.value0)(s);
        };
    }, function (v) {
        return v.value1;
    });
};
module.exports = {
    ComonadStore: ComonadStore, 
    experiment: experiment, 
    peek: peek, 
    peeks: peeks, 
    pos: pos, 
    seek: seek, 
    seeks: seeks, 
    comonadStoreStoreT: comonadStoreStoreT
};
