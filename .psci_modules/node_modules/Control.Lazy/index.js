"use strict";
var Data_Unit = require("../Data.Unit");

// | The `Lazy` class represents types which allow evaluation of values

// | to be _deferred_.

// |

// | Usually, this means that a type contains a function arrow which can

// | be used to delay evaluation.
var Lazy = function (defer) {
    this.defer = defer;
};
var lazyUnit = new Lazy(function (v) {
    return Data_Unit.unit;
});
var lazyFn = new Lazy(function (f) {
    return function (x) {
        return f(Data_Unit.unit)(x);
    };
});
var defer = function (dict) {
    return dict.defer;
};

// | `fix` defines a value as the fixed point of a function.

// |

// | The `Lazy` instance allows us to generate the result lazily.
var fix = function (dictLazy) {
    return function (f) {
        return defer(dictLazy)(function (v) {
            return f(fix(dictLazy)(f));
        });
    };
};
module.exports = {
    Lazy: Lazy, 
    defer: defer, 
    fix: fix, 
    lazyFn: lazyFn, 
    lazyUnit: lazyUnit
};
