"use strict";
var Control_Category = require("../Control.Category");
var Control_Monad = require("../Control.Monad");
var Control_Monad_Eff = require("../Control.Monad.Eff");

// | The `MonadEff` class captures those monads which support native effects.

// |

// | Instances are provided for `Eff` itself, and the standard monad

// | transformers.

// |

// | `liftEff` can be used in any appropriate monad transformer stack to lift an

// | action of type `Eff eff a` into the monad.

// |

// | Note that `MonadEff` is parameterized by the row of effects, so type

// | inference can be tricky. It is generally recommended to either work with a

// | polymorphic row of effects, or a concrete, closed row of effects such as

// | `(trace :: Trace)`.
var MonadEff = function (Monad0, liftEff) {
    this.Monad0 = Monad0;
    this.liftEff = liftEff;
};
var monadEffEff = new MonadEff(function () {
    return Control_Monad_Eff.monadEff;
}, Control_Category.id(Control_Category.categoryFn));
var liftEff = function (dict) {
    return dict.liftEff;
};
module.exports = {
    MonadEff: MonadEff, 
    liftEff: liftEff, 
    monadEffEff: monadEffEff
};
