
// | This module defines the `MonadState` type class and its instances.
"use strict";
var Data_Tuple = require("../Data.Tuple");
var Data_Unit = require("../Data.Unit");
var Prelude = require("../Prelude");

// | The `MonadState s` type class represents those monads which support a single piece of mutable

// | state of type `s`.

// |

// | - `state f` updates the state using the function `f`.

// |

// | An implementation is provided for `StateT`, and for other monad transformers

// | defined in this library.

// |

// | Laws:

// |

// | - `do { get ; get } = get`

// | - `do { put x ; put y } = put y`

// | - `do { put x ; get } = put x $> x`

// | - `do { s <- get ; put s } = pure unit`

// |
var MonadState = function (Monad0, state) {
    this.Monad0 = Monad0;
    this.state = state;
};
var state = function (dict) {
    return dict.state;
};

// | Set the state.
var put = function (dictMonadState) {
    return function (s) {
        return state(dictMonadState)(function (v) {
            return new Data_Tuple.Tuple(Data_Unit.unit, s);
        });
    };
};

// | Modify the state by applying a function to the current state.
var modify = function (dictMonadState) {
    return function (f) {
        return state(dictMonadState)(function (s) {
            return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
        });
    };
};

// | Get a value which depends on the current state.
var gets = function (dictMonadState) {
    return function (f) {
        return state(dictMonadState)(function (s) {
            return new Data_Tuple.Tuple(f(s), s);
        });
    };
};

// | Get the current state.
var get = function (dictMonadState) {
    return state(dictMonadState)(function (s) {
        return new Data_Tuple.Tuple(s, s);
    });
};
module.exports = {
    MonadState: MonadState, 
    get: get, 
    gets: gets, 
    modify: modify, 
    put: put, 
    state: state
};
