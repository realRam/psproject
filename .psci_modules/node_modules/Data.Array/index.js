
// | Helper functions for working with immutable Javascript arrays.

// |

// | _Note_: Depending on your use-case, you may prefer to use `Data.List` or

// | `Data.Sequence` instead, which might give better performance for certain

// | use cases. This module is useful when integrating with JavaScript libraries

// | which use arrays, but immutable arrays are not a practical data structure

// | for many use cases due to their poor asymptotics.

// |

// | In addition to the functions in this module, Arrays have a number of

// | useful instances:

// |

// | * `Functor`, which provides `map :: forall a b. (a -> b) -> Array a ->

// |   Array b`

// | * `Apply`, which provides `(<*>) :: forall a b. Array (a -> b) -> Array a

// |   -> Array b`. This function works a bit like a Cartesian product; the

// |   result array is constructed by applying each function in the first

// |   array to each value in the second, so that the result array ends up with

// |   a length equal to the product of the two arguments' lengths.

// | * `Bind`, which provides `(>>=) :: forall a b. (a -> Array b) -> Array a

// |   -> Array b` (this is the same as `concatMap`).

// | * `Semigroup`, which provides `(<>) :: forall a. Array a -> Array a ->

// |   Array a`, for concatenating arrays.

// | * `Foldable`, which provides a slew of functions for *folding* (also known

// |   as *reducing*) arrays down to one value. For example,

// |   `Data.Foldable.or` tests whether an array of `Boolean` values contains

// |   at least one `true` value.

// | * `Traversable`, which provides the PureScript version of a for-loop,

// |   allowing you to iterate over an array and accumulate effects.

// |
"use strict";
var $foreign = require("./foreign");
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Lazy = require("../Control.Lazy");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Control_Monad_ST = require("../Control.Monad.ST");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array_ST = require("../Data.Array.ST");
var Data_Array_ST_Iterator = require("../Data.Array.ST.Iterator");
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_NonEmpty = require("../Data.NonEmpty");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Unfoldable = require("../Data.Unfoldable");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");

// | A generalization of `zipWith` which accumulates results in some

// | `Applicative` functor.
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
            };
        };
    };
};

// | Takes two arrays and returns an array of corresponding pairs.

// | If one input array is short, excess elements of the longer array are

// | discarded.
var zip = $foreign.zipWith(Data_Tuple.Tuple.create);

// | Change the elements at the specified indices in index/value pairs.

// | Out-of-bounds indices will have no effect.
var updateAtIndices = function (dictFoldable) {
    return function (us) {
        return function (xs) {
            return Control_Monad_ST.pureST(Data_Array_ST.withArray(function (res) {
                return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(dictFoldable)(Data_Tuple.uncurry(Data_Array_ST.pokeSTArray(res)))(us);
            })(xs));
        };
    };
};

// | Change the element at the specified index, creating a new array, or

// | returning `Nothing` if the index is out of bounds.
var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Find the element of an array at the specified index.
var unsafeIndex = function (dictPartial) {
    return $foreign.unsafeIndexImpl;
};

// | Break an array into its first element and remaining elements.

// |

// | Using `uncons` provides a way of writing code that would use cons patterns

// | in Haskell or pre-PureScript 0.7:

// | ``` purescript

// | f (x : xs) = something

// | f [] = somethingElse

// | ```

// | Becomes:

// | ``` purescript

// | f arr = case uncons arr of

// |   Just { head: x, tail: xs } -> something

// |   Nothing -> somethingElse

// | ```
var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
    return function (xs) {
        return new Data_Maybe.Just({
            head: x, 
            tail: xs
        });
    };
});

// | Convert an `Array` into an `Unfoldable` structure.
var toUnfoldable = function (dictUnfoldable) {
    return function (xs) {
        var len = $foreign.length(xs);
        var f = function (i) {
            if (i < len) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.Array line 139, column 3 - line 141, column 26: " + [ i.constructor.name ]);
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
    };
};

// | Keep only a number of elements from the end of an array, creating a new

// | array.
var takeEnd = function (n) {
    return function (xs) {
        return $foreign.drop($foreign.length(xs) - n | 0)(xs);
    };
};

// | Get all but the first element of an array, creating a new array, or

// | `Nothing` if the array is empty

// |

// | Running time: `O(n)` where `n` is the length of the array
var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
    return function (xs) {
        return new Data_Maybe.Just(xs);
    };
});

// | Sort the elements of an array in increasing order, where elements are

// | compared using the specified partial ordering, creating a new array.
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var v = comp(x)(y);
                if (v instanceof Data_Ordering.GT) {
                    return 1;
                };
                if (v instanceof Data_Ordering.EQ) {
                    return 0;
                };
                if (v instanceof Data_Ordering.LT) {
                    return -1 | 0;
                };
                throw new Error("Failed pattern match at Data.Array line 477, column 15 - line 482, column 1: " + [ v.constructor.name ]);
            };
        };
        return $foreign.sortImpl(comp$prime)(xs);
    };
};

// | Sort the elements of an array in increasing order, where elements are

// | sorted based on a projection
var sortWith = function (dictOrd) {
    return function (f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};

//------------------------------------------------------------------------------

// Sorting ---------------------------------------------------------------------

//------------------------------------------------------------------------------

// | Sort the elements of an array in increasing order, creating a new array.
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};

// | Create an array of one element
var singleton = function (a) {
    return [ a ];
};

//------------------------------------------------------------------------------

// Array size ------------------------------------------------------------------

//------------------------------------------------------------------------------

// | Test whether an array is empty.
var $$null = function (xs) {
    return $foreign.length(xs) === 0;
};

// | Remove the duplicates from an array, where element equality is determined

// | by the specified equivalence relation, creating a new array.
var nubBy = function (eq) {
    return function (xs) {
        var v = uncons(xs);
        if (v instanceof Data_Maybe.Just) {
            return $foreign.cons(v.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                return !eq(v.value0.head)(y);
            })(v.value0.tail)));
        };
        if (v instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        throw new Error("Failed pattern match at Data.Array line 594, column 3 - line 596, column 18: " + [ v.constructor.name ]);
    };
};

// | Remove the duplicates from an array, creating a new array.
var nub = function (dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};

// | Apply a function to the element at the specified indices,

// | creating a new array. Out-of-bounds indices will have no effect.
var modifyAtIndices = function (dictFoldable) {
    return function (is) {
        return function (f) {
            return function (xs) {
                return Control_Monad_ST.pureST(Data_Array_ST.withArray(function (res) {
                    return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(dictFoldable)(function (i) {
                        return Data_Array_ST.modifySTArray(res)(i)(f);
                    })(is);
                })(xs));
            };
        };
    };
};

// | Apply a function to each element in an array, supplying a generated

// | zero-based index integer along with the element, creating an array

// | with the new elements.
var mapWithIndex = function (f) {
    return function (xs) {
        return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
    };
};

// | Attempt a computation multiple times, requiring at least one success.

// |

// | The `Lazy` constraint is used to generate the result lazily, to ensure

// | termination.
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};

// | Attempt a computation multiple times, returning as many successful results

// | as possible (possibly zero).

// |

// | The `Lazy` constraint is used to generate the result lazily, to ensure

// | termination.
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
        };
    };
};

// | Insert an element at the specified index, creating a new array, or

// | returning `Nothing` if the index is out of bounds.
var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Get all but the last element of an array, creating a new array, or

// | `Nothing` if the array is empty.

// |

// | Running time: `O(n)` where `n` is the length of the array
var init = function (xs) {
    if ($$null(xs)) {
        return Data_Maybe.Nothing.value;
    };
    if (Data_Boolean.otherwise) {
        return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
    };
    throw new Error("Failed pattern match at Data.Array line 251, column 1 - line 251, column 45: " + [ xs.constructor.name ]);
};

//------------------------------------------------------------------------------

// Indexed operations ----------------------------------------------------------

//------------------------------------------------------------------------------

// | This function provides a safe way to read a value at a particular index

// | from an array.
var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Get the last element in an array, or `Nothing` if the array is empty

// |

// | Running time: `O(1)`.
var last = function (xs) {
    return index(xs)($foreign.length(xs) - 1 | 0);
};

// | Break an array into its last element and all preceding elements.

// |

// | Running time: `O(n)` where `n` is the length of the array
var unsnoc = function (xs) {
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return function (v1) {
            return {
                init: v, 
                last: v1
            };
        };
    })(init(xs)))(last(xs));
};

// | Apply a function to the element at the specified index, creating a new

// | array, or returning `Nothing` if the index is out of bounds.
var modifyAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                return updateAt(i)(f(x))(xs);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};

// | Split an array into two parts:

// |

// | 1. the longest initial subarray for which all elements satisfy the

// |    specified predicate

// | 2. the remaining elements

// |

// | ```purescript

// | span (\n -> n % 2 == 1) [1,3,2,4,5] == { init: [1,3], rest: [2,4,5] }

// | ```

// |

// | Running time: `O(n)`.
var span = function (p) {
    return function (arr) {
        var go = function ($copy_i) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i) {
                var v = index(arr)(i);
                if (v instanceof Data_Maybe.Just) {
                    var $64 = p(v.value0);
                    if ($64) {
                        $copy_i = i + 1 | 0;
                        return;
                    };
                    $tco_done = true;
                    return new Data_Maybe.Just(i);
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.Array line 552, column 5 - line 554, column 25: " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_i);
            };
            return $tco_result;
        };
        var breakIndex = go(0);
        if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
            return {
                init: [  ], 
                rest: arr
            };
        };
        if (breakIndex instanceof Data_Maybe.Just) {
            return {
                init: $foreign.slice(0)(breakIndex.value0)(arr), 
                rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
            };
        };
        if (breakIndex instanceof Data_Maybe.Nothing) {
            return {
                init: arr, 
                rest: [  ]
            };
        };
        throw new Error("Failed pattern match at Data.Array line 539, column 3 - line 545, column 30: " + [ breakIndex.constructor.name ]);
    };
};

// | Calculate the longest initial subarray for which all element satisfy the

// | specified predicate, creating a new array.
var takeWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).init;
    };
};

// | Transforms an array of pairs into an array of first components and an

// | array of second components.
var unzip = function (xs) {
    return Control_Monad_ST.pureST(function __do() {
        var v = Data_Array_ST.emptySTArray();
        var v1 = Data_Array_ST.emptySTArray();
        var v2 = Data_Array_ST_Iterator.iterator(function (v2) {
            return index(xs)(v2);
        })();
        Data_Array_ST_Iterator.iterate(v2)(function (v3) {
            return function __do() {
                Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v)(v3.value0))();
                return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v1)(v3.value1))();
            };
        })();
        var v3 = Data_Array_ST.unsafeFreeze(v)();
        var v4 = Data_Array_ST.unsafeFreeze(v1)();
        return new Data_Tuple.Tuple(v3, v4);
    });
};

//------------------------------------------------------------------------------

// Non-indexed reads -----------------------------------------------------------

//------------------------------------------------------------------------------

// | Get the first element in an array, or `Nothing` if the array is empty

// |

// | Running time: `O(1)`.
var head = function (xs) {
    return index(xs)(0);
};

// | Group equal, consecutive elements of an array into arrays, using the

// | specified equivalence relation to detemine equality.
var groupBy = function (op) {
    return function (xs) {
        return Control_Monad_ST.pureST(function __do() {
            var v = Data_Array_ST.emptySTArray();
            var v1 = Data_Array_ST_Iterator.iterator(function (v1) {
                return index(xs)(v1);
            })();
            Data_Array_ST_Iterator.iterate(v1)(function (x) {
                return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                    var v2 = Data_Array_ST.emptySTArray();
                    Data_Array_ST_Iterator.pushWhile(op(x))(v1)(v2)();
                    var v3 = Data_Array_ST.unsafeFreeze(v2)();
                    return Data_Array_ST.pushSTArray(v)(new Data_NonEmpty.NonEmpty(x, v3))();
                });
            })();
            return Data_Array_ST.unsafeFreeze(v)();
        });
    };
};

// | Group equal, consecutive elements of an array into arrays.

// |

// | ```purescript

// | group [1,1,2,2,1] == [[1,1],[2,2],[1]]

// | ```
var group = function (dictEq) {
    return function (xs) {
        return groupBy(Data_Eq.eq(dictEq))(xs);
    };
};

// | Sort and then group the elements of an array into arrays.

// |

// | ```purescript

// | group' [1,1,2,2,1] == [[1,1,1],[2,2]]

// | ```
var group$prime = function (dictOrd) {
    return function ($93) {
        return group(dictOrd.Eq0())(sort(dictOrd)($93));
    };
};

// | Convert a `Foldable` structure into an `Array`.
var fromFoldable = function (dictFoldable) {
    return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
};
var foldRecM = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (array) {
                var go = function (res) {
                    return function (i) {
                        if (i >= $foreign.length(array)) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(res));
                        };
                        if (Data_Boolean.otherwise) {
                            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(res)(unsafeIndex()(array)(i)))(function (v) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                    a: v, 
                                    b: i + 1 | 0
                                }));
                            });
                        };
                        throw new Error("Failed pattern match at Data.Array line 704, column 3 - line 708, column 42: " + [ res.constructor.name, i.constructor.name ]);
                    };
                };
                return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
            };
        };
    };
};

// | Perform a fold using a monadic step function.
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return $foreign["uncons'"](function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(a);
            })(function (b) {
                return function (bs) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(bs);
                    });
                };
            });
        };
    };
};

// | Find the last index for which a predicate holds.
var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Insert an element into a sorted array, using the specified function to

// | determine the ordering of elements.
var insertBy = function (cmp) {
    return function (x) {
        return function (ys) {
            var i = Data_Maybe.maybe(0)(function (v) {
                return v + 1 | 0;
            })(findLastIndex(function (y) {
                return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
            })(ys));
            return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
        };
    };
};

// | Insert an element into a sorted array.
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};

// | Find the first index for which a predicate holds.
var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Calculate the intersection of two arrays, using the specified equivalence

// | relation to compare elements, creating a new array. Note that duplicates

// | in the first array are preserved while duplicates in the second array are

// | removed.
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return $foreign.filter(function (x) {
                return Data_Maybe.isJust(findIndex(eq(x))(ys));
            })(xs);
        };
    };
};

// | Calculate the intersection of two arrays, creating a new array. Note that

// | duplicates in the first array are preserved while duplicates in the second

// | array are removed.
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};

// | Find the index of the last element equal to the specified element.
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};

// | Find the index of the first element equal to the specified element.
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};

// | Remove the longest initial subarray for which all element satisfy the

// | specified predicate, creating a new array.
var dropWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).rest;
    };
};

// | Drop a number of elements from the start of an array, creating a new array.
var dropEnd = function (n) {
    return function (xs) {
        return $foreign.take($foreign.length(xs) - n | 0)(xs);
    };
};

// | Delete the element at the specified index, creating a new array, or

// | returning `Nothing` if the index is out of bounds.
var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Delete the first element of an array which matches the specified value,

// | under the equivalence relation provided in the first argument, creating a

// | new array.
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2.length === 0) {
                return [  ];
            };
            return Data_Maybe.maybe(v2)(function (i) {
                return Data_Maybe.fromJust()(deleteAt(i)(v2));
            })(findIndex(v(v1))(v2));
        };
    };
};

// | Calculate the union of two arrays, using the specified function to

// | determine equality of elements. Note that duplicates in the first array

// | are preserved while duplicates in the second array are removed.
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};

// | Calculate the union of two arrays. Note that duplicates in the first array

// | are preserved while duplicates in the second array are removed.

// |

// | Running time: `O(n^2)`
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};

// | Delete the first element of an array which is equal to the specified value,

// | creating a new array.

// |

// | Running time: `O(n)`
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};

// | Delete the first occurrence of each element in the second array from the

// | first array, creating a new array.

// |

// | Running time: `O(n*m)`, where n is the length of the first array, and m is

// | the length of the second.
var difference = function (dictEq) {
    return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
};

// | Apply a function to each element in an array, and flatten the results

// | into a single, new array.
var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));

// | Apply a function to each element in an array, keeping only the results

// | which contain a value, creating a new array.
var mapMaybe = function (f) {
    return concatMap(function ($94) {
        return Data_Maybe.maybe([  ])(singleton)(f($94));
    });
};

// | Filter where the predicate returns a `Boolean` in some `Applicative`.

// |

// | ```purescript

// | powerSet :: forall a. Array a -> Array (Array a)

// | powerSet = filterA (const [true, false])

// | ```
var filterA = function (dictApplicative) {
    return function (p) {
        return function ($95) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(mapMaybe(function (v) {
                if (v.value1) {
                    return new Data_Maybe.Just(v.value0);
                };
                return Data_Maybe.Nothing.value;
            }))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(x))(p(x));
            })($95));
        };
    };
};

// | Filter an array of optional values, keeping only the elements which contain

// | a value, creating a new array.
var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));

// | Update or delete the element at the specified index by applying a

// | function to the current value, returning a new array or `Nothing` if the

// | index is out-of-bounds.
var alterAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                var v = f(x);
                if (v instanceof Data_Maybe.Nothing) {
                    return deleteAt(i)(xs);
                };
                if (v instanceof Data_Maybe.Just) {
                    return updateAt(i)(v.value0)(xs);
                };
                throw new Error("Failed pattern match at Data.Array line 392, column 10 - line 394, column 32: " + [ v.constructor.name ]);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
module.exports = {
    alterAt: alterAt, 
    catMaybes: catMaybes, 
    concatMap: concatMap, 
    "delete": $$delete, 
    deleteAt: deleteAt, 
    deleteBy: deleteBy, 
    difference: difference, 
    dropEnd: dropEnd, 
    dropWhile: dropWhile, 
    elemIndex: elemIndex, 
    elemLastIndex: elemLastIndex, 
    filterA: filterA, 
    findIndex: findIndex, 
    findLastIndex: findLastIndex, 
    foldM: foldM, 
    foldRecM: foldRecM, 
    fromFoldable: fromFoldable, 
    group: group, 
    "group'": group$prime, 
    groupBy: groupBy, 
    head: head, 
    index: index, 
    init: init, 
    insert: insert, 
    insertAt: insertAt, 
    insertBy: insertBy, 
    intersect: intersect, 
    intersectBy: intersectBy, 
    last: last, 
    many: many, 
    mapMaybe: mapMaybe, 
    mapWithIndex: mapWithIndex, 
    modifyAt: modifyAt, 
    modifyAtIndices: modifyAtIndices, 
    nub: nub, 
    nubBy: nubBy, 
    "null": $$null, 
    singleton: singleton, 
    some: some, 
    sort: sort, 
    sortBy: sortBy, 
    sortWith: sortWith, 
    span: span, 
    tail: tail, 
    takeEnd: takeEnd, 
    takeWhile: takeWhile, 
    toUnfoldable: toUnfoldable, 
    uncons: uncons, 
    union: union, 
    unionBy: unionBy, 
    unsafeIndex: unsafeIndex, 
    unsnoc: unsnoc, 
    unzip: unzip, 
    updateAt: updateAt, 
    updateAtIndices: updateAtIndices, 
    zip: zip, 
    zipWithA: zipWithA, 
    concat: $foreign.concat, 
    cons: $foreign.cons, 
    drop: $foreign.drop, 
    filter: $foreign.filter, 
    length: $foreign.length, 
    partition: $foreign.partition, 
    range: $foreign.range, 
    replicate: $foreign.replicate, 
    reverse: $foreign.reverse, 
    slice: $foreign.slice, 
    snoc: $foreign.snoc, 
    take: $foreign.take, 
    zipWith: $foreign.zipWith
};
