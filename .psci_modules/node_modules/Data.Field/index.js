"use strict";
var Data_CommutativeRing = require("../Data.CommutativeRing");
var Data_DivisionRing = require("../Data.DivisionRing");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");

// | The `Field` class is for types that are (commutative) fields.

// |

// | Instances must satisfy the following law in addition to the

// | `EuclideanRing` laws:

// |

// | - Non-zero multiplicative inverse: ``a `mod` b = zero`` for all `a` and `b`

// |

// | If a type has a `Field` instance, it should also have a `DivisionRing`

// | instance. In a future release, `DivisionRing` may become a superclass of

// | `Field`.
var Field = function (EuclideanRing0) {
    this.EuclideanRing0 = EuclideanRing0;
};
var fieldNumber = new Field(function () {
    return Data_EuclideanRing.euclideanRingNumber;
});
module.exports = {
    Field: Field, 
    fieldNumber: fieldNumber
};
