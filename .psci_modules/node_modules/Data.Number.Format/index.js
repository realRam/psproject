
// | A module for formatting numbers as strings.

// |

// | Usage:

// | ``` purs

// | > let x = 1234.56789

// |

// | > toStringWith (precision 6) x

// | "1234.57"

// |

// | > toStringWith (fixed 3) x

// | "1234.568"

// |

// | > toStringWith (exponential 2) x

// | "1.23e+3"

// | ```

// |

// | The main method of this module is the `toStringWith` function that accepts

// | a `Format` argument which can be constructed through one of the smart

// | constructors `precision`, `fixed` and `exponential`. Internally, the

// | number will be formatted with JavaScripts `toPrecision`, `toFixed` or

// | `toExponential`.
"use strict";
var $foreign = require("./foreign");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Ord = require("../Data.Ord");
var Prelude = require("../Prelude");

// | The `Format` data type specifies how a number will be formatted.
var Precision = (function () {
    function Precision(value0) {
        this.value0 = value0;
    };
    Precision.create = function (value0) {
        return new Precision(value0);
    };
    return Precision;
})();

// | The `Format` data type specifies how a number will be formatted.
var Fixed = (function () {
    function Fixed(value0) {
        this.value0 = value0;
    };
    Fixed.create = function (value0) {
        return new Fixed(value0);
    };
    return Fixed;
})();

// | The `Format` data type specifies how a number will be formatted.
var Exponential = (function () {
    function Exponential(value0) {
        this.value0 = value0;
    };
    Exponential.create = function (value0) {
        return new Exponential(value0);
    };
    return Exponential;
})();

// | Convert a number to a string with a given format.
var toStringWith = function (v) {
    if (v instanceof Precision) {
        return $foreign.toPrecisionNative(v.value0);
    };
    if (v instanceof Fixed) {
        return $foreign.toFixedNative(v.value0);
    };
    if (v instanceof Exponential) {
        return $foreign.toExponentialNative(v.value0);
    };
    throw new Error("Failed pattern match at Data.Number.Format line 59, column 1 - line 59, column 40: " + [ v.constructor.name ]);
};

// | Create a `toPrecision`-based format from an integer. Values smaller than

// | `1` and larger than `21` will be clamped.
var precision = function ($5) {
    return Precision.create(Data_Ord.clamp(Data_Ord.ordInt)(1)(21)($5));
};

// | Create a `toFixed`-based format from an integer. Values smaller than `0`

// | and larger than `20` will be clamped.
var fixed = function ($6) {
    return Fixed.create(Data_Ord.clamp(Data_Ord.ordInt)(0)(20)($6));
};

// | Create a `toExponential`-based format from an integer. Values smaller than

// | `0` and larger than `20` will be clamped.
var exponential = function ($7) {
    return Exponential.create(Data_Ord.clamp(Data_Ord.ordInt)(0)(20)($7));
};
module.exports = {
    exponential: exponential, 
    fixed: fixed, 
    precision: precision, 
    toStringWith: toStringWith, 
    toString: $foreign.toString
};
