"use strict";
var Control_Category = require("../Control.Category");
var Data_Functor = require("../Data.Functor");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable");
var Data_Traversable = require("../Data.Traversable");
var Prelude = require("../Prelude");

// | `Traversable1` represents data structures with a minimum of one element that can be _traversed_,

// | accumulating results and effects in some `Applicative` functor.

// |

// | - `traverse1` runs an action for every element in a data structure,

// |   and accumulates the results.

// | - `sequence1` runs the actions _contained_ in a data structure,

// |   and accumulates the results.

// |

// | The `traverse1` and `sequence1` functions should be compatible in the

// | following sense:

// |

// | - `traverse1 f xs = sequence1 (f <$> xs)`

// | - `sequence1 = traverse1 id`

// |

// | `Traversable1` instances should also be compatible with the corresponding

// | `Foldable1` instances, in the following sense:

// |

// | - `foldMap1 f = runConst <<< traverse1 (Const <<< f)`

// |

// | Default implementations are provided by the following functions:

// |

// | - `traverse1Default`

// | - `sequence1Default`
var Traversable1 = function (Foldable10, Traversable1, sequence1, traverse1) {
    this.Foldable10 = Foldable10;
    this.Traversable1 = Traversable1;
    this.sequence1 = sequence1;
    this.traverse1 = traverse1;
};
var traverse1 = function (dict) {
    return dict.traverse1;
};

// | A default implementation of `sequence1` using `traverse1`.
var sequence1Default = function (dictTraversable1) {
    return function (dictApply) {
        return traverse1(dictTraversable1)(dictApply)(Control_Category.id(Control_Category.categoryFn));
    };
};
var sequence1 = function (dict) {
    return dict.sequence1;
};

// | A default implementation of `traverse1` using `sequence1`.
var traverse1Default = function (dictTraversable1) {
    return function (dictApply) {
        return function (f) {
            return function (ta) {
                return sequence1(dictTraversable1)(dictApply)(Data_Functor.map((dictTraversable1.Traversable1()).Functor0())(f)(ta));
            };
        };
    };
};
module.exports = {
    Traversable1: Traversable1, 
    sequence1: sequence1, 
    sequence1Default: sequence1Default, 
    traverse1: traverse1, 
    traverse1Default: traverse1Default
};
