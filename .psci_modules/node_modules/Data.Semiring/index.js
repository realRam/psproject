"use strict";
var $foreign = require("./foreign");
var Data_Unit = require("../Data.Unit");

// | The `Semiring` class is for types that support an addition and

// | multiplication operation.

// |

// | Instances must satisfy the following laws:

// |

// | - Commutative monoid under addition:

// |   - Associativity: `(a + b) + c = a + (b + c)`

// |   - Identity: `zero + a = a + zero = a`

// |   - Commutative: `a + b = b + a`

// | - Monoid under multiplication:

// |   - Associativity: `(a * b) * c = a * (b * c)`

// |   - Identity: `one * a = a * one = a`

// | - Multiplication distributes over addition:

// |   - Left distributivity: `a * (b + c) = (a * b) + (a * c)`

// |   - Right distributivity: `(a + b) * c = (a * c) + (b * c)`

// | - Annihilation: `zero * a = a * zero = zero`

// |

// | **Note:** The `Number` and `Int` types are not fully law abiding

// | members of this class hierarchy due to the potential for arithmetic

// | overflows, and in the case of `Number`, the presence of `NaN` and

// | `Infinity` values. The behaviour is unspecified in these cases.
var Semiring = function (add, mul, one, zero) {
    this.add = add;
    this.mul = mul;
    this.one = one;
    this.zero = zero;
};
var zero = function (dict) {
    return dict.zero;
};
var semiringUnit = new Semiring(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, Data_Unit.unit);
var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
var one = function (dict) {
    return dict.one;
};
var mul = function (dict) {
    return dict.mul;
};
var add = function (dict) {
    return dict.add;
};
var semiringFn = function (dictSemiring) {
    return new Semiring(function (f) {
        return function (g) {
            return function (x) {
                return add(dictSemiring)(f(x))(g(x));
            };
        };
    }, function (f) {
        return function (g) {
            return function (x) {
                return mul(dictSemiring)(f(x))(g(x));
            };
        };
    }, function (v) {
        return one(dictSemiring);
    }, function (v) {
        return zero(dictSemiring);
    });
};
module.exports = {
    Semiring: Semiring, 
    add: add, 
    mul: mul, 
    one: one, 
    zero: zero, 
    semiringInt: semiringInt, 
    semiringNumber: semiringNumber, 
    semiringFn: semiringFn, 
    semiringUnit: semiringUnit
};
